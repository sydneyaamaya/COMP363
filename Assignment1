'''
1.augment arrays
2.elimination process
3.substitution process
4.return solution as list
'''
def gaussian_elimination(coefficients, constants):
 #augment arrays
 '''
 coefficients is n x n so n = length of coefficients
 create an empty array that is (n x 1) x n
 combine coefficients and constants into the empty array
 '''
 n = len(coefficients)
 augmented = [[0 for _ in range(n+1)] for _ in range(n)]
 for i in range(n):
  augmented[i] = coefficients[i] + [constants[i]]

 #elimination
 for i in range(n):
  for j in range(i,n):
    # normalize each row, aii is the pivot element
    normalized = augmented[j][i] / augmented[i][i]
    for r in range(i+1,n):
      #eliminate ari for every row between i + 1 and n
      augmented[r][j] = augmented[r][j] - augmented[i][j]*augmented[r][i]

 #substituiton
 '''
 create an empty list x to return n number of solutions
 use a for loop that starts at last row and ends at the first row
 and set x[i] to augmented matrix [i][n]
 use a nested for loop to set x[i] = x[i] - the augmented matrix[i][j]*x[j]
 divide x[i] / augmented [i][i]
 '''
 x = [None for _ in range(n)]
 for i in range(n-1, -1, -1):
   x[i] = augmented[i][n]
   for j in range(i + 1, n):
     x[i] = x[i] - augmented[i][j]*x[j]
   x[i] = x[i] / augmented[i][i]

 #return solutions
 return x;

#testing
a = [
  [1, 1],
  [1,-1]
]
b = [4, 0]
x = gaussian_elimination(a, b)
print(x)

c = [
    [3, 4],
    [4,-2]
]
d = [7, 5]
y = gaussian_elimination(c, d)
print(y)






